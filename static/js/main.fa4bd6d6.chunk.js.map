{"version":3,"sources":["components/Modal/Modal.module.css","components/ImageGallery/ImageGallery.module.css","components/ImageGalleryItem/ImageGalleryItem.module.css","components/Loader/Loader.module.css","components/Button/Button.module.css","components/Searchbar/Searchbar.js","components/Modal/Modal.js","components/ImageGalleryItem/ImageGalleryItem.js","components/Loader/Loader.js","services/images-api.js","components/Button/Button.js","components/ImageGallery/ImageGallery.js","App.js","reportWebVitals.js","index.js","components/Searchbar/Searchbar.module.css"],"names":["module","exports","searchbarRoot","document","querySelector","Searchbar","state","query","handleQueryChange","e","setState","currentTarget","value","toLowerCase","handleSubmit","preventDefault","trim","props","onSubmit","toast","createPortal","className","s","SearchForm","this","type","SearchFormButton","SearchFormButtonLabel","SearchFormInput","autoComplete","autoFocus","placeholder","onChange","Component","modalRoot","Modal","handleKeyDown","code","onClose","handleBackdropClick","target","window","addEventListener","removeEventListener","image","modalImg","modalAlt","Overlay","onClick","src","alt","Img","ImageGalleryItem","showModal","toggleModal","handleModalImg","currentSrc","images","map","largeImageURL","tags","ImageGalleryItemImage","id","App","Loader","color","height","width","timeout","React","fetchImages","page","KEY","BASE_URL","fetch","then","res","ok","json","Promise","reject","Error","api","propTypes","PropTypes","string","number","Button","loadNextPage","ImageGallery","error","status","prevState","scrollHeight","documentElement","imagesAPI","hits","scrollTo","top","behavior","catch","prevProps","prevQuery","nextQuery","message","handleFormSubmit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fa4bd6d6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Overlay\":\"Modal_Overlay__3LmKi\",\"Modal\":\"Modal_Modal__2qw7Y\",\"Img\":\"Modal_Img__3yeo4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageGallery\":\"ImageGallery_ImageGallery__1fAaZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageGalleryItem\":\"ImageGalleryItem_ImageGalleryItem__quX0y\",\"ImageGalleryItemImage\":\"ImageGalleryItem_ImageGalleryItemImage__W43bD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Loader_Loader__1JQDJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3EXP3\"};","import React, { Component } from 'react'\r\nimport { createPortal } from 'react-dom'\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport s from './Searchbar.module.css'\r\n\r\nconst searchbarRoot = document.querySelector('#searchbar-root');\r\n\r\nexport default class Searchbar extends Component {\r\n\r\n    state = {\r\n        query: '',\r\n    }\r\n\r\n    handleQueryChange = e => {\r\n        this.setState({query: e.currentTarget.value.toLowerCase()})\r\n    }\r\n\r\n    handleSubmit = e =>{\r\n        e.preventDefault()\r\n\r\n        if (this.state.query.trim() === '') {\r\n            toast(\"Введите запрос!\");\r\n            return;\r\n        }\r\n\r\n        this.props.onSubmit(this.state.query)\r\n        this.setState({query: ''})\r\n    }\r\n\r\n    render() {\r\n        return createPortal(\r\n            <header className={s.Searchbar}>\r\n                <form className={s.SearchForm} onSubmit={this.handleSubmit}>\r\n                    <button type=\"submit\" className={s.SearchFormButton}>\r\n                    <span className={s.SearchFormButtonLabel}>Search</span>\r\n                    </button>\r\n\r\n                    <input\r\n                    className={s.SearchFormInput}\r\n                    type=\"text\"\r\n                    autoComplete=\"off\"\r\n                    autoFocus\r\n                    placeholder=\"Search images and photos\"\r\n                    onChange={this.handleQueryChange}\r\n                    />\r\n                </form>\r\n            </header>,\r\n            searchbarRoot\r\n        )\r\n    }\r\n}\r\n\r\n/* Описание компонента Searchbar\r\nКомпонент принимает один проп onSubmit - функцию для передачи значения инпута при сабмите формы. Создает DOM-элемент следующей структуры.\r\n */","import React,{Component} from 'react'\r\nimport { createPortal } from 'react-dom'\r\nimport PropTypes from 'prop-types'\r\nimport s from './Modal.module.css'\r\n\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nexport default class Modal extends Component {\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.handleKeyDown)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.handleKeyDown)\r\n    }\r\n\r\n    handleKeyDown = e => {\r\n        if (e.code === 'Escape') {\r\n            this.props.onClose();\r\n        }\r\n    }\r\n\r\n    handleBackdropClick = e => {\r\n        if (e.currentTarget === e.target) {\r\n            this.props.onClose()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { modalImg, modalAlt } = this.props.image;\r\n        \r\n        return createPortal(\r\n        <div className={s.Overlay} onClick={this.handleBackdropClick}>\r\n            <div className={s.Modal}>\r\n                    <img src={modalImg} alt={modalAlt} className={s.Img}/>\r\n            </div>\r\n        </div>,\r\n        modalRoot)\r\n    }\r\n}\r\n\r\nModal.propTypes = {\r\n    onClose: PropTypes.func,\r\n}\r\n\r\n/* При клике по элементу галереи должно открываться модальное окно с темным оверлеем\r\nи отображаться большая версия изображения. Модальное окно должно закрываться \r\nпо нажатию клавиши ESC или по клику на оверлее.\r\n\r\nВнешний вид похож на функционал этого VanillaJS-плагина, только вместо белого \r\nмодального окна рендерится изображение (в примере нажми Run). Анимацию делать не нужно! */","import { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport s from './ImageGalleryItem.module.css'\r\nimport Modal from '../Modal'\r\n\r\nexport default class ImageGalleryItem extends Component {\r\n\r\n     state = {\r\n         showModal: false, \r\n         modalImg: '',\r\n         modalAlt: ''\r\n    }\r\n    \r\n    toggleModal = () => {\r\n        this.setState(({ showModal }) => ({ showModal: !showModal}))\r\n    }\r\n\r\n    handleModalImg = (e) => {\r\n        this.setState({ modalImg: e.target.currentSrc, modalAlt: e.target.alt })\r\n        this.toggleModal();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <>\r\n                    {this.props.images.map(image => (\r\n                        <li key={image.id} onClick={this.handleModalImg}>\r\n                            <img src={image.largeImageURL} alt={image.tags} className={s.ImageGalleryItemImage} />\r\n                        </li>\r\n                    ))}\r\n                {this.state.showModal && <Modal onClose={this.toggleModal} image={this.state}/>}\r\n                </>\r\n        )\r\n    }\r\n}\r\n\r\nImageGalleryItem.propTypes = {\r\n    images: PropTypes.array,\r\n}\r\n\r\n/* Компонент элемента списка с изображением. Создает DOM-элемент следующей структуры.\r\n\r\n<li className=\"ImageGalleryItem\">\r\n  <img src=\"\" alt=\"\" className=\"ImageGalleryItem-image\" />\r\n</li> */","import React from 'react'\r\nimport Loader from \"react-loader-spinner\";\r\nimport s from './Loader.module.css'\r\n\r\nexport default class App extends React.Component {\r\n  //other logic\r\n  render() {\r\n    return (\r\n      <div className={s.Loader}>\r\n        <Loader\r\n          type=\"ThreeDots\"\r\n          color=\"#00BFFF\"\r\n          height={100}\r\n          width={100}\r\n          timeout={3000} //3 secs\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}","import PropTypes from 'prop-types'\r\n\r\nfunction fetchImages(query, page = 1) {\r\n    const KEY = '19267719-9b47d05d33b3fa392544db2d5';\r\n    const BASE_URL = 'https://pixabay.com/api/'\r\n    \r\n    return fetch(`${BASE_URL}?q=${query}&page=${page}&key=${KEY}&image_type=photo&orientation=horizontal&per_page=12`)\r\n                .then(res => {\r\n                    if (res.ok) { return res.json() }\r\n                    return Promise.reject(new Error(`По запросу ${query} ничего не найдено`))\r\n                })\r\n}\r\n\r\nconst api = { fetchImages }\r\n\r\nexport default api;\r\n\r\nfetchImages.propTypes = {\r\n    query: PropTypes.string,\r\n    page: PropTypes.number,\r\n}","import PropTypes from 'prop-types'\r\nimport s from './Button.module.css'\r\n\r\nexport default function Button({ loadNextPage }) {\r\n    return (\r\n        <button type=\"button\" className={s.Button} onClick={loadNextPage}>Load more</button> \r\n    )\r\n}\r\n\r\nButton.propTypes = {\r\n  loadNextPage: PropTypes.func,\r\n}\r\n\r\n/* При нажатии на кнопку Load more должна догружаться следующая порция изображений \r\nи рендериться вместе с предыдущими. После загрузки и рендера новой партии изображений \r\nстраница должна плавно скролиться. Для скрола используй следующий код.\r\n\r\nwindow.scrollTo({\r\n  top: document.documentElement.scrollHeight,\r\n  behavior: 'smooth',\r\n});\r\nКнопка должна рендерится только тогда, когда есть какие-то загруженные изобаржения. \r\nЕсли массив изображений пуст, кнопка не рендерится. */","import { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport s from './ImageGallery.module.css'\r\nimport ImageGalleryItem from '../ImageGalleryItem'\r\nimport Loader from '../Loader'\r\nimport imagesAPI from '../../services/images-api'\r\nimport Button from '../Button'\r\n\r\nexport default class ImageGallery extends Component {\r\n\r\n    state = {\r\n        images: null,\r\n        error: null, \r\n        status: 'idle',\r\n        page: 1,\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState ) {\r\n        const prevQuery = prevProps.query;\r\n        const nextQuery = this.props.query;\r\n         \r\n        if (prevQuery !== nextQuery) {\r\n            this.setState({ status: 'pending', page: 2 })\r\n            \r\n            imagesAPI.fetchImages(nextQuery)\r\n                .then(images => this.setState({ images: images.hits, status: 'resolved' }))\r\n                .catch(error => this.setState({error, status: 'rejected'}))\r\n        }\r\n    }\r\n\r\n    loadNextPage = () => {\r\n        this.setState((prevState) => ({ status: 'resolved', page: prevState.page + 1 }))\r\n\r\n        let scrollHeight = document.documentElement.scrollHeight - 90;\r\n        \r\n        imagesAPI.fetchImages(this.props.query, this.state.page)\r\n            .then(images => this.setState((prevState) => ({ images: [...prevState.images, ...images.hits], status: 'resolved' })))\r\n            .then(() => {\r\n                window.scrollTo({\r\n                    top: scrollHeight,\r\n                    behavior: 'smooth',\r\n                });\r\n                scrollHeight = document.documentElement.scrollHeight;\r\n            })\r\n            .catch(error => this.setState({ error, status: 'rejected' }))\r\n            \r\n    }\r\n    \r\n    render() {\r\n        const { status, error } = this.state;\r\n\r\n        if (status === 'idle') {\r\n            return (<div></div>)\r\n        }\r\n\r\n        if (status === 'pending') {\r\n            return(<Loader/>)\r\n        }\r\n\r\n        if (status === 'rejected') {\r\n            return(<h1>{error.message}</h1>)\r\n        }\r\n\r\n        if (status === 'resolved') {\r\n            return (\r\n                <>\r\n                    <ul className={s.ImageGallery}>\r\n                        <ImageGalleryItem images={this.state.images} />\r\n                    </ul>\r\n                    <Button loadNextPage={this.loadNextPage}/>\r\n                </>\r\n            )\r\n        }\r\n}\r\n}\r\n\r\nImageGallery.propTypes = {\r\n    query: PropTypes.string,\r\n}\r\n\r\n/* Список карточек изображений. Создает DOM-элемент следующей структуры. */","import { ToastContainer } from 'react-toastify';\nimport React, { Component } from 'react'\nimport Searchbar from './components/Searchbar'\nimport ImageGallery from './components/ImageGallery'\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    query: '',\n  }\n\n  handleFormSubmit = query => {\n    this.setState({ query })\n  }\n\n  render() {\n\n    const { query } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Searchbar onSubmit={this.handleFormSubmit}/>\n        <ImageGallery query={query} />\n        <ToastContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Searchbar\":\"Searchbar_Searchbar__2_5w3\",\"SearchForm\":\"Searchbar_SearchForm__1Ar7v\",\"SearchFormButton\":\"Searchbar_SearchFormButton__quEfX\",\"SearchFormButtonLabel\":\"Searchbar_SearchFormButtonLabel__xm9-Z\",\"SearchFormInput\":\"Searchbar_SearchFormInput__T2_HC\"};"],"sourceRoot":""}